name: Create Roadmap Issues

on:
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  create-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create issues from JSON
        run: |
          python3 - <<'PY'
import os, json, sys, urllib.request, urllib.error

# GitHub sets GITHUB_REPOSITORY (owner/repo) and GITHUB_TOKEN automatically
repo = os.environ.get('GITHUB_REPOSITORY')
if not repo:
    print("GITHUB_REPOSITORY not set", file=sys.stderr)
    sys.exit(1)

token = os.environ.get('GITHUB_TOKEN')
if not token:
    print("GITHUB_TOKEN not set", file=sys.stderr)
    sys.exit(1)

issues_path = 'issues/issues.json'
if not os.path.exists(issues_path):
    print(f"Missing file: {issues_path}", file=sys.stderr)
    sys.exit(1)

with open(issues_path, 'r', encoding='utf-8') as f:
    issues = json.load(f)

api_base = "https://api.github.com/repos"
created = 0

for item in issues:
    title = item.get('title')
    body = item.get('body', '')
    payload = json.dumps({'title': title, 'body': body}).encode('utf-8')
    req = urllib.request.Request(f"{api_base}/{repo}/issues", data=payload, method='POST')
    req.add_header("Authorization", f"Bearer {token}")
    req.add_header("Accept", "application/vnd.github+json")
    req.add_header("Content-Type", "application/json")
    try:
        urllib.request.urlopen(req)
        created += 1
        print(f"Created: {title}")
    except urllib.error.HTTPError as e:
        print(f"Failed to create: {title} - HTTP {e.code}", file=sys.stderr)

print(f"Total issues created: {created}")
PY
